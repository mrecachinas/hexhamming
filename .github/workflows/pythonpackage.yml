name: build

on:
  push:
    paths:
      - test/test_hexhamming.py
      - setup.py
      - hexhamming/python_hexhamming.cc
      - pytest.ini
      - requirements-dev.txt
      - .github/workflows/pythonpackage.yml

jobs:
  build-and-test:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9']
        platform: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    - name: üõ† Build Hexhamming Python C extension
      run: python setup.py install
    - name: Test with pytest
      run: pytest
  build-wheels:
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        python-version: ['3.9']
        platform: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install build package
      run: python -m pip install build

    # Build the wheels
    - name: üõ† Build a binary wheel and a source tarball
      if: matrix.platform != 'ubuntu-latest'
      run: python -m build --sdist --wheel --outdir dist/ .

    - name: Build manylinux2014_x86_64 Python wheels
      if: matrix.platform == 'ubuntu-latest'
      uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2014_x86_64
      with:
        python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39'
    #- name: Build manylinux2014_aarch64 Python wheels
    #  if: matrix.platform == 'ubuntu-latest'
    #  uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2014_aarch64
    #  with:
    #    python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39'
    - name: Build manylinux2010_x86_64 Python wheels
      if: matrix.platform == 'ubuntu-latest'
      uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2010_x86_64
      with:
        python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39'
    #- name: Build manylinux2010_i686 Python wheels
    #  if: matrix.platform == 'ubuntu-latest'
    #  uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2010_i686
    #  with:
    #    python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39'

    # Upload the wheels
    - name: Upload wheels for next job
      uses: actions/upload-artifact@master
      with:
        name: wheels
        path: dist

  publish-wheels:
    needs: build-wheels
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']

    steps:
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheels from previous job
      uses: actions/download-artifact@master
      with:
        name: wheels
        path: dist
    - name: Install twine
      run: python -m pip install twine
    - name: üì¶ Publish distribution to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*-manylinux*.whl dist/*-win*.whl dist/*-macosx*.whl
