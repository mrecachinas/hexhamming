name: build

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    name: Test with ${{ matrix.cibw_python }} on Linux
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: true
      matrix:
        cibw_python: [ "cp36-*" , "cp37-*" , "cp38-*" , "cp39-*" , "cp310-*" ]

    steps:
      - uses: actions/checkout@v2
      - name: üêç Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install cibuildwheel twine

      - name: üõ† Build and Test Hexhamming Python C extension
        run: cibuildwheel
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_BEFORE_TEST: pip install -r requirements-dev.txt
          CIBW_TEST_COMMAND: "pytest -s {project}"
          CIBW_BUILD_VERBOSITY: 1

      - name: Check built wheels
        run: twine check wheelhouse/*

  sdist:
    if: startsWith(github.ref, 'refs/tags')
    needs: build-and-test
    name: Source distribution
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install requirements
      run: pip3 install --user check-manifest twine

    - name: Run check-manifest
      run: python3 -m check_manifest

    - name: Build sdist
      run: |
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install -r requirements-dev.txt
        python3 -m build --sdist --outdir wheelhouse

    - name: Install from sdist
      run: |
        pip3 install --user wheelhouse/*.tar.gz

    - name: Check sdist
      run: python3 -m twine check wheelhouse/*

    - name: Upload sdist
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: wheelhouse/*.tar.gz

  wheels_macos:
    if: startsWith(github.ref, 'refs/tags')
    needs: [build-and-test, sdist]
    name: Build ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest ]
        cibw_python: [ "cp38-*", "cp39-*", "cp310-*" ]
        cibw_arch: [ "x86_64", "arm64" ]

    steps:
    - uses: actions/checkout@v2
    - name: üêç Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.9'

    - name: Install cibuildwheel
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install cibuildwheel twine
        echo DEPLOYMENT_TARGET=10.9 >> $GITHUB_ENV

    - name: Changing deployment target
      if: matrix.cibw_arch == 'arm64'
      run: echo DEPLOYMENT_TARGET=12.0 >> $GITHUB_ENV

    - name: üõ† Build Hexhamming Python C extension
      run: |
        cibuildwheel
      env:
        CIBW_ENVIRONMENT: MACOSX_DEPLOYMENT_TARGET=${{ env.DEPLOYMENT_TARGET }}
        CIBW_BUILD: ${{ matrix.cibw_python }}
        CIBW_ARCHS_MACOS: ${{ matrix.cibw_arch }}
        CIBW_TEST_SKIP: "*-macosx_arm64"
        CC: /usr/bin/clang
        CXX: /usr/bin/clang++
        CFLAGS: "-Wno-implicit-function-declaration"
        CIBW_BEFORE_TEST: pip install -r requirements-dev.txt
        CIBW_TEST_COMMAND: "pytest -s {project}"
        CIBW_BUILD_VERBOSITY: 1

    - name: Check built wheels
      run: twine check wheelhouse/*

    - name: Upload built wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: wheelhouse/*.whl
        if-no-files-found: error

  wheels_linux:
    if: startsWith(github.ref, 'refs/tags')
    needs: [build-and-test, sdist]
    name: Build ${{ matrix.cibw_python }} x86_64 wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-18.04 ]
        cibw_arch: ["x86_64"]
        cibw_python: [ "cp36-*" , "cp37-*" , "cp38-*" , "cp39-*" , "cp310-*" ]
        cibw_manylinux: [ manylinux2014, musllinux_1_1 ]

    steps:
      - uses: actions/checkout@v2
      - name: üêç Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install cibuildwheel twine

      - name: üõ† Build Hexhamming Python C extension
        run: |
          cibuildwheel
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_arch }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_BEFORE_TEST: pip install -r requirements-dev.txt
          CIBW_TEST_COMMAND: "pytest -s {project}"
          CIBW_BUILD_VERBOSITY: 1

      - name: Check built wheels
        run: twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_linux_aarch64:
    if: startsWith(github.ref, 'refs/tags')
    needs: [build-and-test, sdist]
    name: Build ${{ matrix.cibw_python }} aarch64 wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-18.04 ]
        cibw_python: [ "cp37-*" , "cp38-*" , "cp39-*" , "cp310-*" ]
        cibw_manylinux: [ manylinux2014, musllinux_1_1 ]

    steps:
      - uses: actions/checkout@v2
      - name: üêç Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Install cibuildwheel
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install cibuildwheel twine

      - name: üõ† Build Hexhamming Python C extension
        run: |
          cibuildwheel
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: aarch64
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_BEFORE_TEST: pip install -r requirements-dev.txt
          CIBW_TEST_COMMAND: "pytest -s {project}"
          CIBW_BUILD_VERBOSITY: 1

      - name: Check built wheels
        run: twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_windows:
    if: startsWith(github.ref, 'refs/tags')
    needs: [build-and-test, sdist]
    name: Build ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [windows-latest]
        cibw_arch: ["AMD64"]

    steps:
      - uses: actions/checkout@v2
      - name: üêç Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install cibuildwheel twine

      - name: üõ† Build Hexhamming Python C extension
        run: |
          cibuildwheel
        env:
          CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-* cp310-*"
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_arch }}
          CIBW_BEFORE_TEST: pip install -r requirements-dev.txt
          CIBW_TEST_COMMAND: "pytest -s {project}"
          CIBW_BUILD_VERBOSITY: 1

      - name: Check built wheels
        run: twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

  publish-wheels:
    if: startsWith(github.ref, 'refs/tags')
    needs: [wheels_macos, wheels_linux, wheels_linux_aarch64, wheels_windows]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']

    steps:
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Collect wheels  #Collect sdist and wheels
      uses: actions/download-artifact@v2
      with:
        name: wheels
        path: wheelhouse

    - name: Install twine
      run: python -m pip install twine

    - name: üì¶ Publish distribution to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload wheelhouse/*.whl
